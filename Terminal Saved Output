Last login: Sat Aug 15 17:18:03 on ttys000
xueqian@Unknown ~ % ls
Applications		Library			Public
Creative Cloud Files	Movies			PycharmProject
Desktop			Music			PycharmProjects
Documents		Parallels		get-pip.py
Downloads		Pictures		rover
IdeaProjects		Projects		rrt-algorithms
xueqian@Unknown ~ % cd Projects
xueqian@Unknown Projects % ls
rrt-algorithms	test
xueqian@Unknown Projects % cd rrt-algorithms 
xueqian@Unknown rrt-algorithms % cd \examples\rrt_star\rrt\rrt_star\rrt_star_3d.py
cd: no such file or directory: examplesrrt_starrrtrrt_starrrt_star_3d.py
xueqian@Unknown rrt-algorithms % cd examples/rrt_star/rrt_star_3d.py
cd: not a directory: examples/rrt_star/rrt_star_3d.py
xueqian@Unknown rrt-algorithms % python examples/rrt_Star/rrt_star_3d.py
Traceback (most recent call last):
  File "examples/rrt_Star/rrt_star_3d.py", line 5, in <module>
    from src.rrt.rrt_star import RRTStar
ModuleNotFoundError: No module named 'src'
xueqian@Unknown rrt-algorithms % python examples/rrt_star/rrt_star_3d.py
Traceback (most recent call last):
  File "examples/rrt_star/rrt_star_3d.py", line 5, in <module>
    from src.rrt.rrt_star import RRTStar
ModuleNotFoundError: No module named 'src'
xueqian@Unknown rrt-algorithms % ls
LICENSE		README.md	examples	src
xueqian@Unknown rrt-algorithms % cd examples
xueqian@Unknown examples % ls
rrt		rrt_bid		rrt_bid_h	rrt_connect	rrt_star
xueqian@Unknown examples % cd rrt_star
xueqian@Unknown rrt_star % ls
rrt_star_2d.py				rrt_star_3d.py
rrt_star_2d_with_random_obstacles.py	rrt_star_3d_with_random_obstacles.py
xueqian@Unknown rrt_star % python rrt_star_3d.py
Traceback (most recent call last):
  File "rrt_star_3d.py", line 5, in <module>
    from src.rrt.rrt_star import RRTStar
ModuleNotFoundError: No module named 'src'
xueqian@Unknown rrt_star % cd examples/rrt_star/rrt_star_3d.py    
cd: no such file or directory: examples/rrt_star/rrt_star_3d.py
xueqian@Unknown rrt_star % python rrt_star_3d.py
Traceback (most recent call last):
  File "rrt_star_3d.py", line 5, in <module>
    from src.rrt.rrt_star import RRTStar
ModuleNotFoundError: No module named 'src'
xueqian@Unknown rrt_star % ls
rrt_star_2d.py				rrt_star_3d.py
rrt_star_2d_with_random_obstacles.py	rrt_star_3d_with_random_obstacles.py
xueqian@Unknown rrt_star % cd..
zsh: command not found: cd..
xueqian@Unknown rrt_star % cd ..
xueqian@Unknown examples % cd ..
xueqian@Unknown rrt-algorithms % cd ..
xueqian@Unknown Projects % ls
rrt-algorithms	test
xueqian@Unknown Projects % cd rrt-algorithms 
xueqian@Unknown rrt-algorithms % ls
LICENSE		README.md	examples	src
xueqian@Unknown rrt-algorithms % cd src
xueqian@Unknown src % ls
rrt		search_space	utilities
xueqian@Unknown src % cd rrt
xueqian@Unknown rrt % ls
heuristics.py		rrt_connect.py		rrt_star_bid_h.py
rrt.py			rrt_star.py		tree.py
rrt_base.py		rrt_star_bid.py
xueqian@Unknown rrt % cat rrt_star.py 
# This file is subject to the terms and conditions defined in
# file 'LICENSE', which is part of this source code package.
from operator import itemgetter

from src.rrt.heuristics import cost_to_go
from src.rrt.heuristics import segment_cost, path_cost
from src.rrt.rrt import RRT


class RRTStar(RRT):
    def __init__(self, X, Q, x_init, x_goal, max_samples, r, prc=0.01, rewire_count=None):
        """
        RRT* Search
        :param X: Search Space
        :param Q: list of lengths of edges added to tree
        :param x_init: tuple, initial location
        :param x_goal: tuple, goal location
        :param max_samples: max number of samples to take
        :param r: resolution of points to sample along edge when checking for collisions
        :param prc: probability of checking whether there is a solution
        :param rewire_count: number of nearby vertices to rewire
        """
        super().__init__(X, Q, x_init, x_goal, max_samples, r, prc)
        self.rewire_count = rewire_count if rewire_count is not None else 0
        self.c_best = float('inf')  # length of best solution thus far

    def get_nearby_vertices(self, tree, x_init, x_new):
        """
        Get nearby vertices to new vertex and their associated path costs from the root of tree
        as if new vertex is connected to each one separately.

        :param tree: tree in which to search
        :param x_init: starting vertex used to calculate path cost
        :param x_new: vertex around which to find nearby vertices
        :return: list of nearby vertices and their costs, sorted in ascending order by cost
        """
        X_near = self.nearby(tree, x_new, self.current_rewire_count(tree))
        L_near = [(path_cost(self.trees[tree].E, x_init, x_near) + segment_cost(x_near, x_new), x_near) for
                  x_near in X_near]
        # noinspection PyTypeChecker
        L_near.sort(key=itemgetter(0))

        return L_near

    def rewire(self, tree, x_new, L_near):
        """
        Rewire tree to shorten edges if possible
        Only rewires vertices according to rewire count
        :param tree: int, tree to rewire
        :param x_new: tuple, newly added vertex
        :param L_near: list of nearby vertices used to rewire
        :return:
        """
        for c_near, x_near in L_near:
            curr_cost = path_cost(self.trees[tree].E, self.x_init, x_near)
            tent_cost = path_cost(self.trees[tree].E, self.x_init, x_new) + segment_cost(x_new, x_near)
            if tent_cost < curr_cost and self.X.collision_free(x_near, x_new, self.r):
                self.trees[tree].E[x_near] = x_new

    def connect_shortest_valid(self, tree, x_new, L_near):
        """
        Connect to nearest vertex that has an unobstructed path
        :param tree: int, tree being added to
        :param x_new: tuple, vertex being added
        :param L_near: list of nearby vertices
        """
        # check nearby vertices for total cost and connect shortest valid edge
        for c_near, x_near in L_near:
            if c_near + cost_to_go(x_near, self.x_goal) < self.c_best and self.connect_to_point(tree, x_near, x_new):
                break

    def current_rewire_count(self, tree):
        """
        Return rewire count
        :param tree: tree being rewired
        :return: rewire count
        """
        # if no rewire count specified, set rewire count to be all vertices
        if self.rewire_count is None:
            return self.trees[tree].V_count

        # max valid rewire count
        return min(self.trees[tree].V_count, self.rewire_count)

    def rrt_star(self):
        """
        Based on algorithm found in: Incremental Sampling-based Algorithms for Optimal Motion Planning
        http://roboticsproceedings.org/rss06/p34.pdf
        :return: set of Vertices; Edges in form: vertex: [neighbor_1, neighbor_2, ...]
        """
        self.add_vertex(0, self.x_init)
        self.add_edge(0, self.x_init, None)

        while True:
            for q in self.Q:  # iterate over different edge lengths
                for i in range(q[1]):  # iterate over number of edges of given length to add
                    x_new, x_nearest = self.new_and_near(0, q)
                    if x_new is None:
                        continue

                    # get nearby vertices and cost-to-come
                    L_near = self.get_nearby_vertices(0, self.x_init, x_new)

                    # check nearby vertices for total cost and connect shortest valid edge
                    self.connect_shortest_valid(0, x_new, L_near)

                    if x_new in self.trees[0].E:
                        # rewire tree
                        self.rewire(0, x_new, L_near)

                    solution = self.check_solution()
                    if solution[0]:
                        return solution[1]
xueqian@Unknown rrt % cd ..
xueqian@Unknown src % ls
rrt		search_space	utilities
xueqian@Unknown src % cd ..
xueqian@Unknown rrt-algorithms % ls
LICENSE		README.md	examples	src
xueqian@Unknown rrt-algorithms % cat examples/rrt_star.3d.py
cat: examples/rrt_star.3d.py: No such file or directory
xueqian@Unknown rrt-algorithms % cat examples/rrt_star/rrt_star_3d.py
# This file is subject to the terms and conditions defined in
# file 'LICENSE', which is part of this source code package.
import numpy as np

from src.rrt.rrt_star import RRTStar
from src.search_space.search_space import SearchSpace
from src.utilities.plotting import Plot

X_dimensions = np.array([(0, 100), (0, 100), (0, 100)])  # dimensions of Search Space
# obstacles
Obstacles = np.array(
    [(20, 20, 20, 40, 40, 40), (20, 20, 60, 40, 40, 80), (20, 60, 20, 40, 80, 40), (60, 60, 20, 80, 80, 40),
     (60, 20, 20, 80, 40, 40), (60, 20, 60, 80, 40, 80), (20, 60, 60, 40, 80, 80), (60, 60, 60, 80, 80, 80)])
x_init = (0, 0, 0)  # starting location
x_goal = (100, 100, 100)  # goal location

Q = np.array([(8, 4)])  # length of tree edges
r = 1  # length of smallest edge to check for intersection with obstacles
max_samples = 1024  # max number of samples to take before timing out
rewire_count = 32  # optional, number of nearby branches to rewire
prc = 0.1  # probability of checking for a connection to goal

# create Search Space
X = SearchSpace(X_dimensions, Obstacles)

# create rrt_search
rrt = RRTStar(X, Q, x_init, x_goal, max_samples, r, prc, rewire_count)
path = rrt.rrt_star()

# plot
plot = Plot("rrt_star_3d")
plot.plot_tree(X, rrt.trees)
if path is not None:
    plot.plot_path(X, path)
plot.plot_obstacles(X, Obstacles)
plot.plot_start(X, x_init)
plot.plot_goal(X, x_goal)
plot.draw(auto_open=True)
xueqian@Unknown rrt-algorithms % cd rrt_star
cd: no such file or directory: rrt_star
xueqian@Unknown rrt-algorithms % cd examples/rrt_star
xueqian@Unknown rrt_star % ls
rrt_star_2d.py				rrt_star_3d.py
rrt_star_2d_with_random_obstacles.py	rrt_star_3d_with_random_obstacles.py
xueqian@Unknown rrt_star % cp ../../src ./
cp: ../../src is a directory (not copied).
xueqian@Unknown rrt_star % cp -R ../../src ./
xueqian@Unknown rrt_star % ls
rrt_star_2d.py				rrt_star_3d.py				src
rrt_star_2d_with_random_obstacles.py	rrt_star_3d_with_random_obstacles.py
xueqian@Unknown rrt_star % python rrt_star_3d.py
Checking if can connect to goal at 15 samples
Could not connect to goal
Checking if can connect to goal at 63 samples
Could not connect to goal
Checking if can connect to goal at 105 samples
Could not connect to goal
Checking if can connect to goal at 127 samples
Could not connect to goal
Checking if can connect to goal at 199 samples
Can connect to goal
Traceback (most recent call last):
  File "rrt_star_3d.py", line 38, in <module>
    plot.draw(auto_open=True)
  File "/Users/xueqian/Projects/rrt-algorithms/examples/rrt_star/src/utilities/plotting.py", line 231, in draw
    py.offline.plot(self.fig, filename=self.filename, auto_open=auto_open)
  File "/usr/local/lib/python3.7/site-packages/plotly/offline/offline.py", line 597, in plot
    auto_open=auto_open,
  File "/usr/local/lib/python3.7/site-packages/plotly/io/_html.py", line 527, in write_html
    with open(file, "w") as f:
FileNotFoundError: [Errno 2] No such file or directory: '../../output/visualizations/rrt_star_3d.html'
xueqian@Unknown rrt_star % pwd
/Users/xueqian/Projects/rrt-algorithms/examples/rrt_star
xueqian@Unknown rrt_star % python rrt_star_3d.py
Checking if can connect to goal at 29 samples
Could not connect to goal
Checking if can connect to goal at 87 samples
Could not connect to goal
Checking if can connect to goal at 133 samples
Can connect to goal
Traceback (most recent call last):
  File "rrt_star_3d.py", line 38, in <module>
    plot.draw(auto_open=True)
  File "/Users/xueqian/Projects/rrt-algorithms/examples/rrt_star/src/utilities/plotting.py", line 231, in draw
    py.offline.plot(self.fig, filename=self.filename, auto_open=auto_open)
  File "/usr/local/lib/python3.7/site-packages/plotly/offline/offline.py", line 597, in plot
    auto_open=auto_open,
  File "/usr/local/lib/python3.7/site-packages/plotly/io/_html.py", line 527, in write_html
    with open(file, "w") as f:
FileNotFoundError: [Errno 2] No such file or directory: '../../output/visualizations/rrt_star_3d.html'
xueqian@Unknown rrt_star % python rrt_star_3d.py
Checking if can connect to goal at 7 samples
Could not connect to goal
Checking if can connect to goal at 36 samples
Could not connect to goal
Checking if can connect to goal at 88 samples
Could not connect to goal
Checking if can connect to goal at 90 samples
Can connect to goal
xueqian@Unknown rrt_star % 
